<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEditorWorld</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mainInit()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Backup
if global.backup {
   global.BackupFailSafe = true
    saveMapName(prefix_project_path_if_needed('backup.jmap'))
}
alarm[5] = global.backup_period
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save RMJ map then go back to fullscreen.
saveRMJMap()
window_set_fullscreen(true)
alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load RMJ map then go back to fullscreen.
loadRMJMap()
window_set_fullscreen(true)
alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load map then go back to fullscreen.
loadMapAskName()
window_set_fullscreen(true)
alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save map then go back to fullscreen.
saveMap()
window_set_fullscreen(true)
alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set interpolation for whether the game is in fullscreen or not (have to delay by a frame)
texture_set_interpolation(window_get_fullscreen());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// prevent spawn gltich
keyboard_check_direct(global.key_left)
keyboard_check_direct(global.key_right)

if global.paused = false and keyboard_check_pressed(global.key_restart) {
    loadPlayer()
    if global.record == 1 {
        clearRecordList();
        global.recordX = oPlayer.x;
        global.recordY = oPlayer.y;
        global.recordGrav = global.grav;
        global.recordXscale = global.player_xscale;
        eraserRecord()
    }
    with oPlayer djump = global.restartWithDJump;
    with oJumpRefresher count = 0
    with oKiller highlight_count = 1000
    with oWarp highlight_count = 1000
    codable_room_restart()
}

if keyboard_check_direct(vk_alt) and keyboard_check_pressed(vk_f4) {
    game_end()
}
if not global.adjustTAS{
adjustPlayerPosition_EndStep()}

// crash the game, for backup testing purposes
/*if keyboard_check_pressed(ord('C')) {
    a = 0
    a += 'a'
}*/

global.count += 1

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>102</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_motion</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ex_patch_window_close_event()) {
    exitPressed()
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.timeLeft &gt;= 0) {
    --global.timeLeft;
    if (global.timeLeft == 0) {
        global.playback = true;
        global.playerAnswerCount = getPlayerAnswerCount();
        global.flashAnswerDelay = room_speed + 1;
    }
}

if (global.flashAnswerDelay &gt;= 0) {
    --global.flashAnswerDelay;
    if (global.flashAnswerDelay == 0) {
        // hide edited objects
        with (all) {
            if (isAVObject(object_index)) {
                visible = false;
            }
        }
        // create answer objects
        global.answerInstances = array_create(0);
        var index = 0;
        for (var i = 0, length = array_length_1d(global.answerObjects); i &lt; length; i += 3) {
            var xx = global.answerObjects[i];
            var yy = global.answerObjects[i + 1];
            var objectID = global.answerObjects[i + 2];
            
            with (instance_create(xx, yy, objectID)) {
                global.answerInstances[index] = id;
                ++index;
            }
        }
    }
    global.flashTimeLeft = room_speed / 2 + 1;
    global.flashCountLeft = 4;
}

if (global.flashTimeLeft &gt;= 0) {
    --global.flashTimeLeft;
    if (global.flashTimeLeft == 0) {
        toggleAnswerInstancesVisible();
        --global.flashCountLeft;
        if (global.flashCountLeft &gt; 0) {
            global.flashTimeLeft = room_speed / 2;
        } else {
            global.flashEndDelay = room_speed;
        }
    }
}

if (global.flashEndDelay &gt;= 0) {
    --global.flashEndDelay;
    if (global.flashEndDelay == 0) {
        global.rightCount = 0;
    
        destroyAnswerInstances();
        with (all) {
            if (isAVObject(object_index)) {
                visible = true;
                var posKey = string(x) + " " + string(y);
                
                var rightWrongSpr = -1;
                if (ds_map_exists(global.answerObjectsPosMap, posKey)) {
                    var answerObjectID = global.answerObjectsPosMap[? posKey];
                    if (object_index == answerObjectID) {
                        global.answerObjectsPosMap[? posKey] = -1;
                        rightWrongSpr = sRight;
                        global.rightCount += 1;
                    } else {
                        rightWrongSpr = sHalfRight;
                        global.rightCount += 0.5;
                    }
                } else {
                    rightWrongSpr = sWrong;
                }
                with (instance_create(x + sprite_width / 2, y + sprite_height / 2, oRightWrong)) {
                    sprite_index = rightWrongSpr;
                }
            }
        }
        
        global.playerScore = global.fuckGMScore[round(global.rightCount)];
        global.showScore = true;
        global.playerScores[global.nowMapIndex] = global.playerScore;
        
        global.nextMapDelay = 2 * room_speed;
    }
}

if (global.nextMapDelay &gt;= 0) {
    --global.nextMapDelay;
    if (global.nextMapDelay == 0) {
        global.playback = false;
        global.showScore = false;
        instance_destroy(oRightWrong);
        nextMap();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var Id = ds_map_find_value(async_load, "id")
var status = ds_map_find_value(async_load, "status")
var str = ds_map_find_value(async_load, "result")

if Id == versionRequestId {
    if status != 0 exit
    map = json_decode(str)
    if map == -1 exit
    
    var newestVersionString = ds_map_find_value(map, 'jtool-version')
    if newestVersionString != global.version_string {
        inputOverlay(input_newversion, inputCallback_NewVersionOpenThread,
            "There's a new Jtool version ("+newestVersionString+")#Visit the Github repository to download it.")
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>deleteBackup()

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
